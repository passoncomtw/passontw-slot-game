name: 部署遊戲 與後台 API服務

on:
  push:
    branches:
      - develop
    paths:
      - 'game-api/**'
      - '.github/workflows/deploy-game-api.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: '部署環境'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production
      version:
        description: '版本號'
        required: false
        default: '0.1.0'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 檢出代碼
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 設置QEMU
        uses: docker/setup-qemu-action@v2

      - name: 設置Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 登錄到DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: 設置版本變數
        id: vars
        run: |
          echo ${{ secrets.CONTROLLER_CENTER_ENV }} > ./.env
          VERSION=$(echo ${{ github.event.inputs.version || 'v0.1.0' }})
          TIMESTAMP=$(date -u +'%Y%m%d%H%M%S')
          COMMIT_SHA=$(git rev-parse --short HEAD)
          echo "VERSION=${VERSION}" >> ./game-api/.env
          echo "BUILD_ID=${TIMESTAMP}-${COMMIT_SHA}" >> ./game-api/.env
          echo "IMAGE_TAG=${VERSION}-${TIMESTAMP}-${COMMIT_SHA}" >> ./game-api/.env
          echo "FULL_IMAGE_NAME=passon/game-api:${VERSION}-${TIMESTAMP}-${COMMIT_SHA}" >> ./game-api/.env
          echo "LATEST_IMAGE_NAME=passon/game-api:latest" >> ./game-api/.env

      - name: 構建並推送Docker鏡像
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./game-api/deploy/Dockerfile.api
          platforms: linux/amd64
          push: true
          build-args: |
            APP_ENV=${{ github.event.inputs.environment || 'development' }}
          tags: |
            ${{ env.FULL_IMAGE_NAME }}
            ${{ env.LATEST_IMAGE_NAME }}

      - name: 部署到遠程服務器
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_BACKEND_HOST }}
          username: root
          key: ${{ secrets.SSH_KEY_PROD_VALUE }}
          port: 22
          script: |
            # 創建部署目錄（如果不存在）
            mkdir -p /opt/services/game-api
            cd /opt/services/game-api
            
            # 備份當前環境文件（如果存在）
            if [ -f .env ]; then
              cp .env .env.backup.$(date +%Y%m%d%H%M%S)
            fi
            
            echo ${{ secrets.CONTROLLER_CENTER_ENV }} > ./.env

            # 下載最新的 docker-compose.yml
            curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/develop/game-api/deploy/docker-compose.yml -o docker-compose.yml

            # 創建日誌目錄
            mkdir -p /opt/services/game-api/logs
            
            # 拉取最新鏡像並重啟服務
            docker-compose pull
            docker-compose down
            docker-compose up -d
            
            # 清理舊鏡像
            docker image prune -f
            
            # 輸出部署日誌
            echo "部署完成: ${{ env.FULL_IMAGE_NAME }}"
            echo "部署時間: $(date)"
            echo "環境: ${{ github.event.inputs.environment || 'development' }}"
            docker-compose ps


      # - name: 部署結果通知
      #   if: always()
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_CHANNEL: deployments
      #     SLACK_TITLE: 遊戲API部署 ${{ job.status }}
      #     SLACK_MESSAGE: |
      #       版本: ${{ env.VERSION }}
      #       環境: ${{ github.event.inputs.environment || 'development' }}
      #       構建ID: ${{ env.BUILD_ID }}
      #       鏡像: ${{ env.FULL_IMAGE_NAME }}
      #       提交: ${{ github.sha }}
      #       觸發者: ${{ github.actor }}
      #     SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }} 